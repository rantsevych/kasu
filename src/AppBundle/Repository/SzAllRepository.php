<?php

namespace AppBundle\Repository;
use Doctrine\DBAL\Query\QueryBuilder;
use MongoDB\Driver\Query;

/**
 * SzAllRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SzAllRepository extends \Doctrine\ORM\EntityRepository
{

    const WEEK = 604800;
    const  DAY = 86400;

    private $params;

    public function getJudgeOccasionsById($id,$isNull = false,$sort = false){
        $this->params = [];
        $this->params['id']= $id;
        
        $query = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.iDSUDDOCL = :id');
        
        if($isNull){
            $this->params['time'] ='00:00';
            $query->andWhere('s.sZTIME = :time');
        }else{
            $this->params['time'] ='00:00';
            $query->andWhere('s.sZTIME > :time');
        }
        if($sort){
            $query = $this->getSortTimeParam($sort,$query);
        }

         $result = $query->orderBy('s.sZ, s.sZTIME','ASC')
            ->groupBy('s.dECLINNUMBER')
            ->setParameters($this->params)
            ->getQuery()
            ->getResult();
        
        return $result;
    }

    public function getJudgeReportedById($id,$decNum,$isNull=false,$sort= false){
        $this->params = [];
        $this->params = array('id' => $id,'decNum'=>$decNum);
        $query = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.iDSUDKOL != :id');

        if($sort){
            $query = $this->getSortTimeParam($sort,$query);
        }

        $result =  $query->andWhere('s.dECLINNUMBER = :decNum')
            ->setParameters($this->params)
            ->getQuery()
            ->getResult();

        return $result;
    }

    public function getJudgeMemberById($id,$isNull=false,$sort=false){
        $this->params = [];
        $this->params =  array('id' => $id);
        $query = $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.iDSUDKOL = :id');
        if($isNull){
            $this->params['time'] ='00:00';
            $query->andWhere('s.sZTIME = :time');
        }else{
            $this->params['time'] ='00:00';
            $query->andWhere('s.sZTIME > :time');
        }

        if($sort){
            $query = $this->getSortTimeParam($sort,$query);
        }

          $result =  $query->orderBy('s.sZ, s.sZTIME','ASC')
            ->groupBy('s.dECLINNUMBER')
            ->setParameters($this->params)
            ->getQuery()
            ->getResult();
        
        return $result;
    }

    public function getJudgeDataSortById($id)
    {
        return $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.iDSUDDOCL = :id')
            ->orderBy('s.sZ', 'ASC')
            ->setParameters(array('id' => $id,))
            ->getQuery()
            ->getResult();
    }


    public function getJudgeForCalendar($id)
    {
        return $this->createQueryBuilder('s')
            ->select('s')
            ->where('s.iDSUDDOCL = :id')
            ->orderBy('s.sZ', 'ASC')
            ->setParameters(array('id' => $id,))
            ->getQuery()
            ->getResult();
    }




    /**
     * @param $sort
     * @param QueryBuilder $query
     * @return string
     */
    private function getSortTimeParam($sort,$query){

        switch ($sort){
            case 'day':
                $time = time();
                $dateObject = new \DateTime(date('Y-m-d',$time));
                $sort = $dateObject->format('Y-m-d');
                $this->params['sort'] = $sort;
                $query->andWhere('s.sZ = :sort');
                break;
            case 'week':
                $startDay = $this->getWeekInterval(date('D'));
                $endDay = $startDay + self::WEEK;
                $startDayObject = new \DateTime(date('Y-m-d',$startDay));
                $endDayObject = new \DateTime(date('Y-m-d',$endDay));

                $this->params['start'] = $startDayObject->format('Y-m-d');
                $this->params['end'] = $endDayObject->format('Y-m-d');
                $query->andWhere('s.sZ >= :start');
                $query->andWhere('s.sZ < :end');
                break;
            case 'nextWeek':
                $startDay = $this->getWeekInterval(date('D'))+ self::WEEK;
                $endDay = $startDay + self::WEEK;
                $startDayObject = new \DateTime(date('Y-m-d',$startDay));
                $endDayObject = new \DateTime(date('Y-m-d',$endDay));

                $this->params['start'] = $startDayObject->format('Y-m-d');
                $this->params['end'] = $endDayObject->format('Y-m-d');
                $query->andWhere('s.sZ >= :start');
                $query->andWhere('s.sZ < :end');
                break;
        }
        return $query;
    }


    /**@desc comment
     * @param $day
     * @return int
     */
    private function  getWeekInterval($day){
        $time = 0;
        switch (strtolower($day)){
            case 'sun':
                $time = time() - (self::DAY * 6);
                break;
            case 'mon':
                $time = time() + self::WEEK;
                break;
            case 'tue':
                $time = time() - self::DAY;
                break;
            case 'wed':
                $time = time() - (self::DAY * 2) ;
                break;
            case  'thu':
                $time = time() - (self::DAY * 3) ;
                break;
            case  'fri':
                $time = time() - (self::DAY * 4) ;
                break;
            case 'sat':
                $time = time() - (self::DAY * 5) ;
                break;
        }
        return $time;
    }

}
